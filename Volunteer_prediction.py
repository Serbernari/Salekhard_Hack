#!/usr/bin/env python
# coding: utf-8

# In[1]:


from pickle import load


# In[12]:


#возвращает вектор заинтересованности волонтера по его группам вк
def groups_to_df (user_groups):

    events = {'name': 'events', 
              'words': ['Товары для праздников','Тренинг, семинар',\
                        'Шоу, передача',\
                        'Школа','Цветы','Хостел','Фотограф','Фото- и видеосъёмка',\
                        'Фестиваль','Объявления', 'Культура, искусство','Культурный центр'\
                       'Музей, галерея, выставка','Организация праздников','Кинотеатр'\
                       'Концертный зал','Ночной клуб','Торгово-развлекательный центр',\
                       'Фестиваль','Цирк','Бар, паб']}
    culture = {'name': 'culture', 
               'words': ['Литература','Товары для творчества','Туристическое агентство',\
                         'Туры, экскурсии','Компьютеры', 'Компьютерные игры',\
                         'Школа','Цирк','Цветы','Книга','Художник / Художница','Фильм',\
                        'Творчество','Кино','Искусство и развлечения']}
    sport = {'name': 'sport', 
             'words': ['Спорт','Велосипеды','Водный транспорт','Школа','Хоккейная команда',\
                       'Футбольная команда','Фото- и видеосъёмка','Фитнес-центр',\
                       'Летние виды спорта', 'Спортивная команда', 'Спортивная организация'\
                       ,'Спортивное питание','Спортивный клуб','Спортивный комплекс',\
                       'Спортсмен / Спортсменка','Здоровый образ жизни','Хоккей', 'Футбол']}
    med = {'name': 'med', 
           'words': ['Медицина','Аптека, оптика','Больница','Косметология',\
                     'Лекарственный препарат','Медицинская услуга','Медицинский центр',\
                      'Стоматология']}
    ww2 = {'name': 'ww2', 
           'words': ['Архив','Библиотека','Дом культуры','Антиквариат','Пенсионный фонд','История',\
                    'Военное дело']}
    cyber = {'name': 'cyber', 
             'words': ['Компьютерная техника','Киберспортивная команда',\
                    'Киберспортивная организация', 'Киберспортсмен',\
                      'Компьютеры', 'Компьютерные игры','Видеоигра','Стример','Киберспорт']}
    social = {'name': 'social', 
              'words': ['Молодёжное движение','Торговый центр','Тренинг, семинар','Управляющая компания',\
                        'Юридические услуги',\
                        'Химчистка, прачечная','Финансы и страхование','Финансовые рынки',\
                       'Дискуссионный клуб','Общество','Благотворительная организация']}
    eco = {'name': 'eco', 
           'words': ['Туризм и отдых','Активный отдых','Визовый центр','Гостиница',\
             'Информационный портал','Летний лагерь','Национальный парк, заповедник','Охота и рыбалка',\
             'Продажа билетов, бронирование гостиниц','Санаторий, дом отдыха','Туристическое агентство',\
             'Туры, экскурсии','Хостел']}
    animals = {'name': 'animals', 
               'words': ['Животные','Ветеринарная клиника','Зоомагазин',\
                         'Товары для животных','Услуги для владельцев животных','Домашние и дикие животные']}
    search = {'name': 'search', 
              'words': ['Благотворительная организация','Туризм и отдых','Активный отдых',\
                'Национальный парк, заповедник','Охота и рыбалка','Здоровый образ жизни']}
    
    competences = [events, culture, sport, med, ww2, cyber, social, eco, animals, search]
   
    user_vec = {elem['name']:0 for elem in competences}
       

   #собираем сырой вектор, не нормализированный
    for comp in competences:
        for key_word in comp['words']:
            if key_word in user_groups:
                user_vec[comp['name']] = user_groups.count(key_word)
              
    #стандартизуем вектор к 0..1
#     a = np.fromiter(user_vec.values(), dtype=float)
#     minval = np.min(a)
#     maxval = np.max(a[np.nonzero(a)])

#     if (maxval - minval != 0):
#         for key in user_vec:
#             if user_vec[key] != 0:
#                 user_vec[key] -= minval
#                 user_vec[key] /= (maxval - minval)
#                 user_vec[key] *= 10
#                 user_vec[key] = int(user_vec[key])
  
    
    return user_vec
   


# In[13]:


def get_prediction(X_test):
    with open('Tree_model_89.sav', 'rb') as fid:
        clf_loaded = load(fid)
        y_pred = clf_loaded.predict(X_test)

    return  y_pred[0]


# In[19]:


# 1 - волонтер, 0 - нет
def get_single_prediction(a):
    return get_prediction([list(groups_to_df(a).values())])

